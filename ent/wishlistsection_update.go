// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"wishlist-wrangler-api/ent/predicate"
	"wishlist-wrangler-api/ent/wishlistsection"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WishlistSectionUpdate is the builder for updating WishlistSection entities.
type WishlistSectionUpdate struct {
	config
	hooks    []Hook
	mutation *WishlistSectionMutation
}

// Where appends a list predicates to the WishlistSectionUpdate builder.
func (wsu *WishlistSectionUpdate) Where(ps ...predicate.WishlistSection) *WishlistSectionUpdate {
	wsu.mutation.Where(ps...)
	return wsu
}

// SetType sets the "type" field.
func (wsu *WishlistSectionUpdate) SetType(w wishlistsection.Type) *WishlistSectionUpdate {
	wsu.mutation.SetType(w)
	return wsu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (wsu *WishlistSectionUpdate) SetNillableType(w *wishlistsection.Type) *WishlistSectionUpdate {
	if w != nil {
		wsu.SetType(*w)
	}
	return wsu
}

// SetValue sets the "value" field.
func (wsu *WishlistSectionUpdate) SetValue(s string) *WishlistSectionUpdate {
	wsu.mutation.SetValue(s)
	return wsu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (wsu *WishlistSectionUpdate) SetNillableValue(s *string) *WishlistSectionUpdate {
	if s != nil {
		wsu.SetValue(*s)
	}
	return wsu
}

// SetWishlistID sets the "wishlist_id" field.
func (wsu *WishlistSectionUpdate) SetWishlistID(u uuid.UUID) *WishlistSectionUpdate {
	wsu.mutation.SetWishlistID(u)
	return wsu
}

// SetNillableWishlistID sets the "wishlist_id" field if the given value is not nil.
func (wsu *WishlistSectionUpdate) SetNillableWishlistID(u *uuid.UUID) *WishlistSectionUpdate {
	if u != nil {
		wsu.SetWishlistID(*u)
	}
	return wsu
}

// SetTemplateSectionID sets the "template_section_id" field.
func (wsu *WishlistSectionUpdate) SetTemplateSectionID(u uuid.UUID) *WishlistSectionUpdate {
	wsu.mutation.SetTemplateSectionID(u)
	return wsu
}

// SetNillableTemplateSectionID sets the "template_section_id" field if the given value is not nil.
func (wsu *WishlistSectionUpdate) SetNillableTemplateSectionID(u *uuid.UUID) *WishlistSectionUpdate {
	if u != nil {
		wsu.SetTemplateSectionID(*u)
	}
	return wsu
}

// Mutation returns the WishlistSectionMutation object of the builder.
func (wsu *WishlistSectionUpdate) Mutation() *WishlistSectionMutation {
	return wsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wsu *WishlistSectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wsu.sqlSave, wsu.mutation, wsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wsu *WishlistSectionUpdate) SaveX(ctx context.Context) int {
	affected, err := wsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wsu *WishlistSectionUpdate) Exec(ctx context.Context) error {
	_, err := wsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsu *WishlistSectionUpdate) ExecX(ctx context.Context) {
	if err := wsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wsu *WishlistSectionUpdate) check() error {
	if v, ok := wsu.mutation.GetType(); ok {
		if err := wishlistsection.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "WishlistSection.type": %w`, err)}
		}
	}
	if v, ok := wsu.mutation.Value(); ok {
		if err := wishlistsection.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "WishlistSection.value": %w`, err)}
		}
	}
	return nil
}

func (wsu *WishlistSectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(wishlistsection.Table, wishlistsection.Columns, sqlgraph.NewFieldSpec(wishlistsection.FieldID, field.TypeUUID))
	if ps := wsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wsu.mutation.GetType(); ok {
		_spec.SetField(wishlistsection.FieldType, field.TypeEnum, value)
	}
	if value, ok := wsu.mutation.Value(); ok {
		_spec.SetField(wishlistsection.FieldValue, field.TypeString, value)
	}
	if value, ok := wsu.mutation.WishlistID(); ok {
		_spec.SetField(wishlistsection.FieldWishlistID, field.TypeUUID, value)
	}
	if value, ok := wsu.mutation.TemplateSectionID(); ok {
		_spec.SetField(wishlistsection.FieldTemplateSectionID, field.TypeUUID, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wishlistsection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wsu.mutation.done = true
	return n, nil
}

// WishlistSectionUpdateOne is the builder for updating a single WishlistSection entity.
type WishlistSectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WishlistSectionMutation
}

// SetType sets the "type" field.
func (wsuo *WishlistSectionUpdateOne) SetType(w wishlistsection.Type) *WishlistSectionUpdateOne {
	wsuo.mutation.SetType(w)
	return wsuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (wsuo *WishlistSectionUpdateOne) SetNillableType(w *wishlistsection.Type) *WishlistSectionUpdateOne {
	if w != nil {
		wsuo.SetType(*w)
	}
	return wsuo
}

// SetValue sets the "value" field.
func (wsuo *WishlistSectionUpdateOne) SetValue(s string) *WishlistSectionUpdateOne {
	wsuo.mutation.SetValue(s)
	return wsuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (wsuo *WishlistSectionUpdateOne) SetNillableValue(s *string) *WishlistSectionUpdateOne {
	if s != nil {
		wsuo.SetValue(*s)
	}
	return wsuo
}

// SetWishlistID sets the "wishlist_id" field.
func (wsuo *WishlistSectionUpdateOne) SetWishlistID(u uuid.UUID) *WishlistSectionUpdateOne {
	wsuo.mutation.SetWishlistID(u)
	return wsuo
}

// SetNillableWishlistID sets the "wishlist_id" field if the given value is not nil.
func (wsuo *WishlistSectionUpdateOne) SetNillableWishlistID(u *uuid.UUID) *WishlistSectionUpdateOne {
	if u != nil {
		wsuo.SetWishlistID(*u)
	}
	return wsuo
}

// SetTemplateSectionID sets the "template_section_id" field.
func (wsuo *WishlistSectionUpdateOne) SetTemplateSectionID(u uuid.UUID) *WishlistSectionUpdateOne {
	wsuo.mutation.SetTemplateSectionID(u)
	return wsuo
}

// SetNillableTemplateSectionID sets the "template_section_id" field if the given value is not nil.
func (wsuo *WishlistSectionUpdateOne) SetNillableTemplateSectionID(u *uuid.UUID) *WishlistSectionUpdateOne {
	if u != nil {
		wsuo.SetTemplateSectionID(*u)
	}
	return wsuo
}

// Mutation returns the WishlistSectionMutation object of the builder.
func (wsuo *WishlistSectionUpdateOne) Mutation() *WishlistSectionMutation {
	return wsuo.mutation
}

// Where appends a list predicates to the WishlistSectionUpdate builder.
func (wsuo *WishlistSectionUpdateOne) Where(ps ...predicate.WishlistSection) *WishlistSectionUpdateOne {
	wsuo.mutation.Where(ps...)
	return wsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wsuo *WishlistSectionUpdateOne) Select(field string, fields ...string) *WishlistSectionUpdateOne {
	wsuo.fields = append([]string{field}, fields...)
	return wsuo
}

// Save executes the query and returns the updated WishlistSection entity.
func (wsuo *WishlistSectionUpdateOne) Save(ctx context.Context) (*WishlistSection, error) {
	return withHooks(ctx, wsuo.sqlSave, wsuo.mutation, wsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wsuo *WishlistSectionUpdateOne) SaveX(ctx context.Context) *WishlistSection {
	node, err := wsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wsuo *WishlistSectionUpdateOne) Exec(ctx context.Context) error {
	_, err := wsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsuo *WishlistSectionUpdateOne) ExecX(ctx context.Context) {
	if err := wsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wsuo *WishlistSectionUpdateOne) check() error {
	if v, ok := wsuo.mutation.GetType(); ok {
		if err := wishlistsection.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "WishlistSection.type": %w`, err)}
		}
	}
	if v, ok := wsuo.mutation.Value(); ok {
		if err := wishlistsection.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "WishlistSection.value": %w`, err)}
		}
	}
	return nil
}

func (wsuo *WishlistSectionUpdateOne) sqlSave(ctx context.Context) (_node *WishlistSection, err error) {
	if err := wsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(wishlistsection.Table, wishlistsection.Columns, sqlgraph.NewFieldSpec(wishlistsection.FieldID, field.TypeUUID))
	id, ok := wsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WishlistSection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wishlistsection.FieldID)
		for _, f := range fields {
			if !wishlistsection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wishlistsection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wsuo.mutation.GetType(); ok {
		_spec.SetField(wishlistsection.FieldType, field.TypeEnum, value)
	}
	if value, ok := wsuo.mutation.Value(); ok {
		_spec.SetField(wishlistsection.FieldValue, field.TypeString, value)
	}
	if value, ok := wsuo.mutation.WishlistID(); ok {
		_spec.SetField(wishlistsection.FieldWishlistID, field.TypeUUID, value)
	}
	if value, ok := wsuo.mutation.TemplateSectionID(); ok {
		_spec.SetField(wishlistsection.FieldTemplateSectionID, field.TypeUUID, value)
	}
	_node = &WishlistSection{config: wsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wishlistsection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wsuo.mutation.done = true
	return _node, nil
}
