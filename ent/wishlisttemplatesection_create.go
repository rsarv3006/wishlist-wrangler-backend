// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wishlist-wrangler-api/ent/wishlisttemplate"
	"wishlist-wrangler-api/ent/wishlisttemplatesection"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WishlistTemplateSectionCreate is the builder for creating a WishlistTemplateSection entity.
type WishlistTemplateSectionCreate struct {
	config
	mutation *WishlistTemplateSectionMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (wtsc *WishlistTemplateSectionCreate) SetTitle(s string) *WishlistTemplateSectionCreate {
	wtsc.mutation.SetTitle(s)
	return wtsc
}

// SetCreatedAt sets the "created_at" field.
func (wtsc *WishlistTemplateSectionCreate) SetCreatedAt(t time.Time) *WishlistTemplateSectionCreate {
	wtsc.mutation.SetCreatedAt(t)
	return wtsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wtsc *WishlistTemplateSectionCreate) SetNillableCreatedAt(t *time.Time) *WishlistTemplateSectionCreate {
	if t != nil {
		wtsc.SetCreatedAt(*t)
	}
	return wtsc
}

// SetID sets the "id" field.
func (wtsc *WishlistTemplateSectionCreate) SetID(u uuid.UUID) *WishlistTemplateSectionCreate {
	wtsc.mutation.SetID(u)
	return wtsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wtsc *WishlistTemplateSectionCreate) SetNillableID(u *uuid.UUID) *WishlistTemplateSectionCreate {
	if u != nil {
		wtsc.SetID(*u)
	}
	return wtsc
}

// SetWishlistTemplateID sets the "wishlistTemplate" edge to the WishlistTemplate entity by ID.
func (wtsc *WishlistTemplateSectionCreate) SetWishlistTemplateID(id uuid.UUID) *WishlistTemplateSectionCreate {
	wtsc.mutation.SetWishlistTemplateID(id)
	return wtsc
}

// SetNillableWishlistTemplateID sets the "wishlistTemplate" edge to the WishlistTemplate entity by ID if the given value is not nil.
func (wtsc *WishlistTemplateSectionCreate) SetNillableWishlistTemplateID(id *uuid.UUID) *WishlistTemplateSectionCreate {
	if id != nil {
		wtsc = wtsc.SetWishlistTemplateID(*id)
	}
	return wtsc
}

// SetWishlistTemplate sets the "wishlistTemplate" edge to the WishlistTemplate entity.
func (wtsc *WishlistTemplateSectionCreate) SetWishlistTemplate(w *WishlistTemplate) *WishlistTemplateSectionCreate {
	return wtsc.SetWishlistTemplateID(w.ID)
}

// Mutation returns the WishlistTemplateSectionMutation object of the builder.
func (wtsc *WishlistTemplateSectionCreate) Mutation() *WishlistTemplateSectionMutation {
	return wtsc.mutation
}

// Save creates the WishlistTemplateSection in the database.
func (wtsc *WishlistTemplateSectionCreate) Save(ctx context.Context) (*WishlistTemplateSection, error) {
	wtsc.defaults()
	return withHooks(ctx, wtsc.sqlSave, wtsc.mutation, wtsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wtsc *WishlistTemplateSectionCreate) SaveX(ctx context.Context) *WishlistTemplateSection {
	v, err := wtsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wtsc *WishlistTemplateSectionCreate) Exec(ctx context.Context) error {
	_, err := wtsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wtsc *WishlistTemplateSectionCreate) ExecX(ctx context.Context) {
	if err := wtsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wtsc *WishlistTemplateSectionCreate) defaults() {
	if _, ok := wtsc.mutation.CreatedAt(); !ok {
		v := wishlisttemplatesection.DefaultCreatedAt()
		wtsc.mutation.SetCreatedAt(v)
	}
	if _, ok := wtsc.mutation.ID(); !ok {
		v := wishlisttemplatesection.DefaultID()
		wtsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wtsc *WishlistTemplateSectionCreate) check() error {
	if _, ok := wtsc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "WishlistTemplateSection.title"`)}
	}
	if v, ok := wtsc.mutation.Title(); ok {
		if err := wishlisttemplatesection.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "WishlistTemplateSection.title": %w`, err)}
		}
	}
	if _, ok := wtsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WishlistTemplateSection.created_at"`)}
	}
	return nil
}

func (wtsc *WishlistTemplateSectionCreate) sqlSave(ctx context.Context) (*WishlistTemplateSection, error) {
	if err := wtsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wtsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wtsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wtsc.mutation.id = &_node.ID
	wtsc.mutation.done = true
	return _node, nil
}

func (wtsc *WishlistTemplateSectionCreate) createSpec() (*WishlistTemplateSection, *sqlgraph.CreateSpec) {
	var (
		_node = &WishlistTemplateSection{config: wtsc.config}
		_spec = sqlgraph.NewCreateSpec(wishlisttemplatesection.Table, sqlgraph.NewFieldSpec(wishlisttemplatesection.FieldID, field.TypeUUID))
	)
	if id, ok := wtsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wtsc.mutation.Title(); ok {
		_spec.SetField(wishlisttemplatesection.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := wtsc.mutation.CreatedAt(); ok {
		_spec.SetField(wishlisttemplatesection.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := wtsc.mutation.WishlistTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlisttemplatesection.WishlistTemplateTable,
			Columns: []string{wishlisttemplatesection.WishlistTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlisttemplate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.wishlist_template_sections = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WishlistTemplateSectionCreateBulk is the builder for creating many WishlistTemplateSection entities in bulk.
type WishlistTemplateSectionCreateBulk struct {
	config
	err      error
	builders []*WishlistTemplateSectionCreate
}

// Save creates the WishlistTemplateSection entities in the database.
func (wtscb *WishlistTemplateSectionCreateBulk) Save(ctx context.Context) ([]*WishlistTemplateSection, error) {
	if wtscb.err != nil {
		return nil, wtscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wtscb.builders))
	nodes := make([]*WishlistTemplateSection, len(wtscb.builders))
	mutators := make([]Mutator, len(wtscb.builders))
	for i := range wtscb.builders {
		func(i int, root context.Context) {
			builder := wtscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WishlistTemplateSectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wtscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wtscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wtscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wtscb *WishlistTemplateSectionCreateBulk) SaveX(ctx context.Context) []*WishlistTemplateSection {
	v, err := wtscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wtscb *WishlistTemplateSectionCreateBulk) Exec(ctx context.Context) error {
	_, err := wtscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wtscb *WishlistTemplateSectionCreateBulk) ExecX(ctx context.Context) {
	if err := wtscb.Exec(ctx); err != nil {
		panic(err)
	}
}
