// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wishlist-wrangler-api/ent/loginrequest"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// LoginRequest is the model entity for the LoginRequest schema.
type LoginRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserId holds the value of the "userId" field.
	UserId uuid.UUID `json:"userId,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// LoginRequestCode holds the value of the "loginRequestCode" field.
	LoginRequestCode string `json:"loginRequestCode,omitempty"`
	// Status holds the value of the "status" field.
	Status       loginrequest.Status `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LoginRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case loginrequest.FieldLoginRequestCode, loginrequest.FieldStatus:
			values[i] = new(sql.NullString)
		case loginrequest.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case loginrequest.FieldID, loginrequest.FieldUserId:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LoginRequest fields.
func (lr *LoginRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case loginrequest.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				lr.ID = *value
			}
		case loginrequest.FieldUserId:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value != nil {
				lr.UserId = *value
			}
		case loginrequest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lr.CreatedAt = value.Time
			}
		case loginrequest.FieldLoginRequestCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field loginRequestCode", values[i])
			} else if value.Valid {
				lr.LoginRequestCode = value.String
			}
		case loginrequest.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				lr.Status = loginrequest.Status(value.String)
			}
		default:
			lr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LoginRequest.
// This includes values selected through modifiers, order, etc.
func (lr *LoginRequest) Value(name string) (ent.Value, error) {
	return lr.selectValues.Get(name)
}

// Update returns a builder for updating this LoginRequest.
// Note that you need to call LoginRequest.Unwrap() before calling this method if this LoginRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (lr *LoginRequest) Update() *LoginRequestUpdateOne {
	return NewLoginRequestClient(lr.config).UpdateOne(lr)
}

// Unwrap unwraps the LoginRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lr *LoginRequest) Unwrap() *LoginRequest {
	_tx, ok := lr.config.driver.(*txDriver)
	if !ok {
		panic("ent: LoginRequest is not a transactional entity")
	}
	lr.config.driver = _tx.drv
	return lr
}

// String implements the fmt.Stringer.
func (lr *LoginRequest) String() string {
	var builder strings.Builder
	builder.WriteString("LoginRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lr.ID))
	builder.WriteString("userId=")
	builder.WriteString(fmt.Sprintf("%v", lr.UserId))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(lr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("loginRequestCode=")
	builder.WriteString(lr.LoginRequestCode)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", lr.Status))
	builder.WriteByte(')')
	return builder.String()
}

// LoginRequests is a parsable slice of LoginRequest.
type LoginRequests []*LoginRequest
