// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wishlist-wrangler-api/ent/user"
	"wishlist-wrangler-api/ent/wishlisttemplate"
	"wishlist-wrangler-api/ent/wishlisttemplatesection"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WishlistTemplateCreate is the builder for creating a WishlistTemplate entity.
type WishlistTemplateCreate struct {
	config
	mutation *WishlistTemplateMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (wtc *WishlistTemplateCreate) SetTitle(s string) *WishlistTemplateCreate {
	wtc.mutation.SetTitle(s)
	return wtc
}

// SetCreatedAt sets the "created_at" field.
func (wtc *WishlistTemplateCreate) SetCreatedAt(t time.Time) *WishlistTemplateCreate {
	wtc.mutation.SetCreatedAt(t)
	return wtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wtc *WishlistTemplateCreate) SetNillableCreatedAt(t *time.Time) *WishlistTemplateCreate {
	if t != nil {
		wtc.SetCreatedAt(*t)
	}
	return wtc
}

// SetDescription sets the "description" field.
func (wtc *WishlistTemplateCreate) SetDescription(s string) *WishlistTemplateCreate {
	wtc.mutation.SetDescription(s)
	return wtc
}

// SetID sets the "id" field.
func (wtc *WishlistTemplateCreate) SetID(u uuid.UUID) *WishlistTemplateCreate {
	wtc.mutation.SetID(u)
	return wtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wtc *WishlistTemplateCreate) SetNillableID(u *uuid.UUID) *WishlistTemplateCreate {
	if u != nil {
		wtc.SetID(*u)
	}
	return wtc
}

// AddCreatorIdIDs adds the "creatorId" edge to the User entity by IDs.
func (wtc *WishlistTemplateCreate) AddCreatorIdIDs(ids ...uuid.UUID) *WishlistTemplateCreate {
	wtc.mutation.AddCreatorIdIDs(ids...)
	return wtc
}

// AddCreatorId adds the "creatorId" edges to the User entity.
func (wtc *WishlistTemplateCreate) AddCreatorId(u ...*User) *WishlistTemplateCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return wtc.AddCreatorIdIDs(ids...)
}

// AddSectionIDs adds the "sections" edge to the WishlistTemplateSection entity by IDs.
func (wtc *WishlistTemplateCreate) AddSectionIDs(ids ...uuid.UUID) *WishlistTemplateCreate {
	wtc.mutation.AddSectionIDs(ids...)
	return wtc
}

// AddSections adds the "sections" edges to the WishlistTemplateSection entity.
func (wtc *WishlistTemplateCreate) AddSections(w ...*WishlistTemplateSection) *WishlistTemplateCreate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wtc.AddSectionIDs(ids...)
}

// Mutation returns the WishlistTemplateMutation object of the builder.
func (wtc *WishlistTemplateCreate) Mutation() *WishlistTemplateMutation {
	return wtc.mutation
}

// Save creates the WishlistTemplate in the database.
func (wtc *WishlistTemplateCreate) Save(ctx context.Context) (*WishlistTemplate, error) {
	wtc.defaults()
	return withHooks(ctx, wtc.sqlSave, wtc.mutation, wtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wtc *WishlistTemplateCreate) SaveX(ctx context.Context) *WishlistTemplate {
	v, err := wtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wtc *WishlistTemplateCreate) Exec(ctx context.Context) error {
	_, err := wtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wtc *WishlistTemplateCreate) ExecX(ctx context.Context) {
	if err := wtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wtc *WishlistTemplateCreate) defaults() {
	if _, ok := wtc.mutation.CreatedAt(); !ok {
		v := wishlisttemplate.DefaultCreatedAt()
		wtc.mutation.SetCreatedAt(v)
	}
	if _, ok := wtc.mutation.ID(); !ok {
		v := wishlisttemplate.DefaultID()
		wtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wtc *WishlistTemplateCreate) check() error {
	if _, ok := wtc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "WishlistTemplate.title"`)}
	}
	if v, ok := wtc.mutation.Title(); ok {
		if err := wishlisttemplate.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "WishlistTemplate.title": %w`, err)}
		}
	}
	if _, ok := wtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WishlistTemplate.created_at"`)}
	}
	if _, ok := wtc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "WishlistTemplate.description"`)}
	}
	if v, ok := wtc.mutation.Description(); ok {
		if err := wishlisttemplate.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "WishlistTemplate.description": %w`, err)}
		}
	}
	return nil
}

func (wtc *WishlistTemplateCreate) sqlSave(ctx context.Context) (*WishlistTemplate, error) {
	if err := wtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wtc.mutation.id = &_node.ID
	wtc.mutation.done = true
	return _node, nil
}

func (wtc *WishlistTemplateCreate) createSpec() (*WishlistTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &WishlistTemplate{config: wtc.config}
		_spec = sqlgraph.NewCreateSpec(wishlisttemplate.Table, sqlgraph.NewFieldSpec(wishlisttemplate.FieldID, field.TypeUUID))
	)
	if id, ok := wtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wtc.mutation.Title(); ok {
		_spec.SetField(wishlisttemplate.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := wtc.mutation.CreatedAt(); ok {
		_spec.SetField(wishlisttemplate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wtc.mutation.Description(); ok {
		_spec.SetField(wishlisttemplate.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := wtc.mutation.CreatorIdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wishlisttemplate.CreatorIdTable,
			Columns: []string{wishlisttemplate.CreatorIdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wtc.mutation.SectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wishlisttemplate.SectionsTable,
			Columns: []string{wishlisttemplate.SectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlisttemplatesection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WishlistTemplateCreateBulk is the builder for creating many WishlistTemplate entities in bulk.
type WishlistTemplateCreateBulk struct {
	config
	err      error
	builders []*WishlistTemplateCreate
}

// Save creates the WishlistTemplate entities in the database.
func (wtcb *WishlistTemplateCreateBulk) Save(ctx context.Context) ([]*WishlistTemplate, error) {
	if wtcb.err != nil {
		return nil, wtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wtcb.builders))
	nodes := make([]*WishlistTemplate, len(wtcb.builders))
	mutators := make([]Mutator, len(wtcb.builders))
	for i := range wtcb.builders {
		func(i int, root context.Context) {
			builder := wtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WishlistTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wtcb *WishlistTemplateCreateBulk) SaveX(ctx context.Context) []*WishlistTemplate {
	v, err := wtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wtcb *WishlistTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := wtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wtcb *WishlistTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := wtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
