// Code generated by ent, DO NOT EDIT.

package loginrequest

import (
	"time"
	"wishlist-wrangler-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldLTE(FieldID, id))
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v uuid.UUID) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldEQ(FieldUserId, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldEQ(FieldEmail, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldEQ(FieldCreatedAt, v))
}

// LoginRequestCode applies equality check predicate on the "loginRequestCode" field. It's identical to LoginRequestCodeEQ.
func LoginRequestCode(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldEQ(FieldLoginRequestCode, v))
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v uuid.UUID) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldEQ(FieldUserId, v))
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v uuid.UUID) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldNEQ(FieldUserId, v))
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...uuid.UUID) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldIn(FieldUserId, vs...))
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...uuid.UUID) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldNotIn(FieldUserId, vs...))
}

// UserIdGT applies the GT predicate on the "userId" field.
func UserIdGT(v uuid.UUID) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldGT(FieldUserId, v))
}

// UserIdGTE applies the GTE predicate on the "userId" field.
func UserIdGTE(v uuid.UUID) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldGTE(FieldUserId, v))
}

// UserIdLT applies the LT predicate on the "userId" field.
func UserIdLT(v uuid.UUID) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldLT(FieldUserId, v))
}

// UserIdLTE applies the LTE predicate on the "userId" field.
func UserIdLTE(v uuid.UUID) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldLTE(FieldUserId, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldContainsFold(FieldEmail, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldLTE(FieldCreatedAt, v))
}

// LoginRequestCodeEQ applies the EQ predicate on the "loginRequestCode" field.
func LoginRequestCodeEQ(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldEQ(FieldLoginRequestCode, v))
}

// LoginRequestCodeNEQ applies the NEQ predicate on the "loginRequestCode" field.
func LoginRequestCodeNEQ(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldNEQ(FieldLoginRequestCode, v))
}

// LoginRequestCodeIn applies the In predicate on the "loginRequestCode" field.
func LoginRequestCodeIn(vs ...string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldIn(FieldLoginRequestCode, vs...))
}

// LoginRequestCodeNotIn applies the NotIn predicate on the "loginRequestCode" field.
func LoginRequestCodeNotIn(vs ...string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldNotIn(FieldLoginRequestCode, vs...))
}

// LoginRequestCodeGT applies the GT predicate on the "loginRequestCode" field.
func LoginRequestCodeGT(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldGT(FieldLoginRequestCode, v))
}

// LoginRequestCodeGTE applies the GTE predicate on the "loginRequestCode" field.
func LoginRequestCodeGTE(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldGTE(FieldLoginRequestCode, v))
}

// LoginRequestCodeLT applies the LT predicate on the "loginRequestCode" field.
func LoginRequestCodeLT(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldLT(FieldLoginRequestCode, v))
}

// LoginRequestCodeLTE applies the LTE predicate on the "loginRequestCode" field.
func LoginRequestCodeLTE(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldLTE(FieldLoginRequestCode, v))
}

// LoginRequestCodeContains applies the Contains predicate on the "loginRequestCode" field.
func LoginRequestCodeContains(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldContains(FieldLoginRequestCode, v))
}

// LoginRequestCodeHasPrefix applies the HasPrefix predicate on the "loginRequestCode" field.
func LoginRequestCodeHasPrefix(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldHasPrefix(FieldLoginRequestCode, v))
}

// LoginRequestCodeHasSuffix applies the HasSuffix predicate on the "loginRequestCode" field.
func LoginRequestCodeHasSuffix(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldHasSuffix(FieldLoginRequestCode, v))
}

// LoginRequestCodeEqualFold applies the EqualFold predicate on the "loginRequestCode" field.
func LoginRequestCodeEqualFold(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldEqualFold(FieldLoginRequestCode, v))
}

// LoginRequestCodeContainsFold applies the ContainsFold predicate on the "loginRequestCode" field.
func LoginRequestCodeContainsFold(v string) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldContainsFold(FieldLoginRequestCode, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.LoginRequest {
	return predicate.LoginRequest(sql.FieldNotIn(FieldStatus, vs...))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LoginRequest) predicate.LoginRequest {
	return predicate.LoginRequest(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LoginRequest) predicate.LoginRequest {
	return predicate.LoginRequest(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LoginRequest) predicate.LoginRequest {
	return predicate.LoginRequest(sql.NotPredicates(p))
}
