// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wishlist-wrangler-api/ent/wishlist"
	"wishlist-wrangler-api/ent/wishlistsection"
	"wishlist-wrangler-api/ent/wishlisttemplatesection"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WishlistSectionCreate is the builder for creating a WishlistSection entity.
type WishlistSectionCreate struct {
	config
	mutation *WishlistSectionMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (wsc *WishlistSectionCreate) SetType(w wishlistsection.Type) *WishlistSectionCreate {
	wsc.mutation.SetType(w)
	return wsc
}

// SetTextValue sets the "textValue" field.
func (wsc *WishlistSectionCreate) SetTextValue(s string) *WishlistSectionCreate {
	wsc.mutation.SetTextValue(s)
	return wsc
}

// SetCreatedAt sets the "created_at" field.
func (wsc *WishlistSectionCreate) SetCreatedAt(t time.Time) *WishlistSectionCreate {
	wsc.mutation.SetCreatedAt(t)
	return wsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wsc *WishlistSectionCreate) SetNillableCreatedAt(t *time.Time) *WishlistSectionCreate {
	if t != nil {
		wsc.SetCreatedAt(*t)
	}
	return wsc
}

// SetID sets the "id" field.
func (wsc *WishlistSectionCreate) SetID(u uuid.UUID) *WishlistSectionCreate {
	wsc.mutation.SetID(u)
	return wsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wsc *WishlistSectionCreate) SetNillableID(u *uuid.UUID) *WishlistSectionCreate {
	if u != nil {
		wsc.SetID(*u)
	}
	return wsc
}

// SetWishlistID sets the "wishlist" edge to the Wishlist entity by ID.
func (wsc *WishlistSectionCreate) SetWishlistID(id uuid.UUID) *WishlistSectionCreate {
	wsc.mutation.SetWishlistID(id)
	return wsc
}

// SetNillableWishlistID sets the "wishlist" edge to the Wishlist entity by ID if the given value is not nil.
func (wsc *WishlistSectionCreate) SetNillableWishlistID(id *uuid.UUID) *WishlistSectionCreate {
	if id != nil {
		wsc = wsc.SetWishlistID(*id)
	}
	return wsc
}

// SetWishlist sets the "wishlist" edge to the Wishlist entity.
func (wsc *WishlistSectionCreate) SetWishlist(w *Wishlist) *WishlistSectionCreate {
	return wsc.SetWishlistID(w.ID)
}

// AddWishlistTemplateSectionIDs adds the "wishlistTemplateSection" edge to the WishlistTemplateSection entity by IDs.
func (wsc *WishlistSectionCreate) AddWishlistTemplateSectionIDs(ids ...uuid.UUID) *WishlistSectionCreate {
	wsc.mutation.AddWishlistTemplateSectionIDs(ids...)
	return wsc
}

// AddWishlistTemplateSection adds the "wishlistTemplateSection" edges to the WishlistTemplateSection entity.
func (wsc *WishlistSectionCreate) AddWishlistTemplateSection(w ...*WishlistTemplateSection) *WishlistSectionCreate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wsc.AddWishlistTemplateSectionIDs(ids...)
}

// Mutation returns the WishlistSectionMutation object of the builder.
func (wsc *WishlistSectionCreate) Mutation() *WishlistSectionMutation {
	return wsc.mutation
}

// Save creates the WishlistSection in the database.
func (wsc *WishlistSectionCreate) Save(ctx context.Context) (*WishlistSection, error) {
	wsc.defaults()
	return withHooks(ctx, wsc.sqlSave, wsc.mutation, wsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wsc *WishlistSectionCreate) SaveX(ctx context.Context) *WishlistSection {
	v, err := wsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wsc *WishlistSectionCreate) Exec(ctx context.Context) error {
	_, err := wsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsc *WishlistSectionCreate) ExecX(ctx context.Context) {
	if err := wsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wsc *WishlistSectionCreate) defaults() {
	if _, ok := wsc.mutation.CreatedAt(); !ok {
		v := wishlistsection.DefaultCreatedAt()
		wsc.mutation.SetCreatedAt(v)
	}
	if _, ok := wsc.mutation.ID(); !ok {
		v := wishlistsection.DefaultID()
		wsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wsc *WishlistSectionCreate) check() error {
	if _, ok := wsc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "WishlistSection.type"`)}
	}
	if v, ok := wsc.mutation.GetType(); ok {
		if err := wishlistsection.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "WishlistSection.type": %w`, err)}
		}
	}
	if _, ok := wsc.mutation.TextValue(); !ok {
		return &ValidationError{Name: "textValue", err: errors.New(`ent: missing required field "WishlistSection.textValue"`)}
	}
	if v, ok := wsc.mutation.TextValue(); ok {
		if err := wishlistsection.TextValueValidator(v); err != nil {
			return &ValidationError{Name: "textValue", err: fmt.Errorf(`ent: validator failed for field "WishlistSection.textValue": %w`, err)}
		}
	}
	if _, ok := wsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WishlistSection.created_at"`)}
	}
	return nil
}

func (wsc *WishlistSectionCreate) sqlSave(ctx context.Context) (*WishlistSection, error) {
	if err := wsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wsc.mutation.id = &_node.ID
	wsc.mutation.done = true
	return _node, nil
}

func (wsc *WishlistSectionCreate) createSpec() (*WishlistSection, *sqlgraph.CreateSpec) {
	var (
		_node = &WishlistSection{config: wsc.config}
		_spec = sqlgraph.NewCreateSpec(wishlistsection.Table, sqlgraph.NewFieldSpec(wishlistsection.FieldID, field.TypeUUID))
	)
	if id, ok := wsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wsc.mutation.GetType(); ok {
		_spec.SetField(wishlistsection.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := wsc.mutation.TextValue(); ok {
		_spec.SetField(wishlistsection.FieldTextValue, field.TypeString, value)
		_node.TextValue = value
	}
	if value, ok := wsc.mutation.CreatedAt(); ok {
		_spec.SetField(wishlistsection.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := wsc.mutation.WishlistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlistsection.WishlistTable,
			Columns: []string{wishlistsection.WishlistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.wishlist_sections = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wsc.mutation.WishlistTemplateSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wishlistsection.WishlistTemplateSectionTable,
			Columns: []string{wishlistsection.WishlistTemplateSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlisttemplatesection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WishlistSectionCreateBulk is the builder for creating many WishlistSection entities in bulk.
type WishlistSectionCreateBulk struct {
	config
	err      error
	builders []*WishlistSectionCreate
}

// Save creates the WishlistSection entities in the database.
func (wscb *WishlistSectionCreateBulk) Save(ctx context.Context) ([]*WishlistSection, error) {
	if wscb.err != nil {
		return nil, wscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wscb.builders))
	nodes := make([]*WishlistSection, len(wscb.builders))
	mutators := make([]Mutator, len(wscb.builders))
	for i := range wscb.builders {
		func(i int, root context.Context) {
			builder := wscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WishlistSectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wscb *WishlistSectionCreateBulk) SaveX(ctx context.Context) []*WishlistSection {
	v, err := wscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wscb *WishlistSectionCreateBulk) Exec(ctx context.Context) error {
	_, err := wscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wscb *WishlistSectionCreateBulk) ExecX(ctx context.Context) {
	if err := wscb.Exec(ctx); err != nil {
		panic(err)
	}
}
