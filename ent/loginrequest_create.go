// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wishlist-wrangler-api/ent/loginrequest"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// LoginRequestCreate is the builder for creating a LoginRequest entity.
type LoginRequestCreate struct {
	config
	mutation *LoginRequestMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (lrc *LoginRequestCreate) SetUserId(u uuid.UUID) *LoginRequestCreate {
	lrc.mutation.SetUserId(u)
	return lrc
}

// SetCreatedAt sets the "created_at" field.
func (lrc *LoginRequestCreate) SetCreatedAt(t time.Time) *LoginRequestCreate {
	lrc.mutation.SetCreatedAt(t)
	return lrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lrc *LoginRequestCreate) SetNillableCreatedAt(t *time.Time) *LoginRequestCreate {
	if t != nil {
		lrc.SetCreatedAt(*t)
	}
	return lrc
}

// SetLoginRequestCode sets the "loginRequestCode" field.
func (lrc *LoginRequestCreate) SetLoginRequestCode(s string) *LoginRequestCreate {
	lrc.mutation.SetLoginRequestCode(s)
	return lrc
}

// SetStatus sets the "status" field.
func (lrc *LoginRequestCreate) SetStatus(l loginrequest.Status) *LoginRequestCreate {
	lrc.mutation.SetStatus(l)
	return lrc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lrc *LoginRequestCreate) SetNillableStatus(l *loginrequest.Status) *LoginRequestCreate {
	if l != nil {
		lrc.SetStatus(*l)
	}
	return lrc
}

// SetID sets the "id" field.
func (lrc *LoginRequestCreate) SetID(u uuid.UUID) *LoginRequestCreate {
	lrc.mutation.SetID(u)
	return lrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lrc *LoginRequestCreate) SetNillableID(u *uuid.UUID) *LoginRequestCreate {
	if u != nil {
		lrc.SetID(*u)
	}
	return lrc
}

// Mutation returns the LoginRequestMutation object of the builder.
func (lrc *LoginRequestCreate) Mutation() *LoginRequestMutation {
	return lrc.mutation
}

// Save creates the LoginRequest in the database.
func (lrc *LoginRequestCreate) Save(ctx context.Context) (*LoginRequest, error) {
	lrc.defaults()
	return withHooks(ctx, lrc.sqlSave, lrc.mutation, lrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lrc *LoginRequestCreate) SaveX(ctx context.Context) *LoginRequest {
	v, err := lrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrc *LoginRequestCreate) Exec(ctx context.Context) error {
	_, err := lrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrc *LoginRequestCreate) ExecX(ctx context.Context) {
	if err := lrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lrc *LoginRequestCreate) defaults() {
	if _, ok := lrc.mutation.CreatedAt(); !ok {
		v := loginrequest.DefaultCreatedAt()
		lrc.mutation.SetCreatedAt(v)
	}
	if _, ok := lrc.mutation.Status(); !ok {
		v := loginrequest.DefaultStatus
		lrc.mutation.SetStatus(v)
	}
	if _, ok := lrc.mutation.ID(); !ok {
		v := loginrequest.DefaultID()
		lrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lrc *LoginRequestCreate) check() error {
	if _, ok := lrc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "LoginRequest.userId"`)}
	}
	if _, ok := lrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LoginRequest.created_at"`)}
	}
	if _, ok := lrc.mutation.LoginRequestCode(); !ok {
		return &ValidationError{Name: "loginRequestCode", err: errors.New(`ent: missing required field "LoginRequest.loginRequestCode"`)}
	}
	if _, ok := lrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "LoginRequest.status"`)}
	}
	if v, ok := lrc.mutation.Status(); ok {
		if err := loginrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "LoginRequest.status": %w`, err)}
		}
	}
	return nil
}

func (lrc *LoginRequestCreate) sqlSave(ctx context.Context) (*LoginRequest, error) {
	if err := lrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lrc.mutation.id = &_node.ID
	lrc.mutation.done = true
	return _node, nil
}

func (lrc *LoginRequestCreate) createSpec() (*LoginRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &LoginRequest{config: lrc.config}
		_spec = sqlgraph.NewCreateSpec(loginrequest.Table, sqlgraph.NewFieldSpec(loginrequest.FieldID, field.TypeUUID))
	)
	if id, ok := lrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lrc.mutation.UserId(); ok {
		_spec.SetField(loginrequest.FieldUserId, field.TypeUUID, value)
		_node.UserId = value
	}
	if value, ok := lrc.mutation.CreatedAt(); ok {
		_spec.SetField(loginrequest.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lrc.mutation.LoginRequestCode(); ok {
		_spec.SetField(loginrequest.FieldLoginRequestCode, field.TypeString, value)
		_node.LoginRequestCode = value
	}
	if value, ok := lrc.mutation.Status(); ok {
		_spec.SetField(loginrequest.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	return _node, _spec
}

// LoginRequestCreateBulk is the builder for creating many LoginRequest entities in bulk.
type LoginRequestCreateBulk struct {
	config
	err      error
	builders []*LoginRequestCreate
}

// Save creates the LoginRequest entities in the database.
func (lrcb *LoginRequestCreateBulk) Save(ctx context.Context) ([]*LoginRequest, error) {
	if lrcb.err != nil {
		return nil, lrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lrcb.builders))
	nodes := make([]*LoginRequest, len(lrcb.builders))
	mutators := make([]Mutator, len(lrcb.builders))
	for i := range lrcb.builders {
		func(i int, root context.Context) {
			builder := lrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoginRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lrcb *LoginRequestCreateBulk) SaveX(ctx context.Context) []*LoginRequest {
	v, err := lrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrcb *LoginRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := lrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrcb *LoginRequestCreateBulk) ExecX(ctx context.Context) {
	if err := lrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
