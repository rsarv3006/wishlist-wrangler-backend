// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wishlist-wrangler-api/ent/wishlistsection"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// WishlistSection is the model entity for the WishlistSection schema.
type WishlistSection struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type wishlistsection.Type `json:"type,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// WishlistID holds the value of the "wishlist_id" field.
	WishlistID uuid.UUID `json:"wishlist_id,omitempty"`
	// TemplateSectionID holds the value of the "template_section_id" field.
	TemplateSectionID uuid.UUID `json:"template_section_id,omitempty"`
	selectValues      sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WishlistSection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case wishlistsection.FieldType, wishlistsection.FieldValue:
			values[i] = new(sql.NullString)
		case wishlistsection.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case wishlistsection.FieldID, wishlistsection.FieldWishlistID, wishlistsection.FieldTemplateSectionID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WishlistSection fields.
func (ws *WishlistSection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case wishlistsection.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ws.ID = *value
			}
		case wishlistsection.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ws.Type = wishlistsection.Type(value.String)
			}
		case wishlistsection.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				ws.Value = value.String
			}
		case wishlistsection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ws.CreatedAt = value.Time
			}
		case wishlistsection.FieldWishlistID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field wishlist_id", values[i])
			} else if value != nil {
				ws.WishlistID = *value
			}
		case wishlistsection.FieldTemplateSectionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field template_section_id", values[i])
			} else if value != nil {
				ws.TemplateSectionID = *value
			}
		default:
			ws.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the WishlistSection.
// This includes values selected through modifiers, order, etc.
func (ws *WishlistSection) GetValue(name string) (ent.Value, error) {
	return ws.selectValues.Get(name)
}

// Update returns a builder for updating this WishlistSection.
// Note that you need to call WishlistSection.Unwrap() before calling this method if this WishlistSection
// was returned from a transaction, and the transaction was committed or rolled back.
func (ws *WishlistSection) Update() *WishlistSectionUpdateOne {
	return NewWishlistSectionClient(ws.config).UpdateOne(ws)
}

// Unwrap unwraps the WishlistSection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ws *WishlistSection) Unwrap() *WishlistSection {
	_tx, ok := ws.config.driver.(*txDriver)
	if !ok {
		panic("ent: WishlistSection is not a transactional entity")
	}
	ws.config.driver = _tx.drv
	return ws
}

// String implements the fmt.Stringer.
func (ws *WishlistSection) String() string {
	var builder strings.Builder
	builder.WriteString("WishlistSection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ws.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ws.Type))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(ws.Value)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ws.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("wishlist_id=")
	builder.WriteString(fmt.Sprintf("%v", ws.WishlistID))
	builder.WriteString(", ")
	builder.WriteString("template_section_id=")
	builder.WriteString(fmt.Sprintf("%v", ws.TemplateSectionID))
	builder.WriteByte(')')
	return builder.String()
}

// WishlistSections is a parsable slice of WishlistSection.
type WishlistSections []*WishlistSection
