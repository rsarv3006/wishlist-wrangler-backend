// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wishlist-wrangler-api/ent/wishlist"
	"wishlist-wrangler-api/ent/wishlistsection"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// WishlistSection is the model entity for the WishlistSection schema.
type WishlistSection struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type wishlistsection.Type `json:"type,omitempty"`
	// TextValue holds the value of the "textValue" field.
	TextValue string `json:"textValue,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WishlistSectionQuery when eager-loading is set.
	Edges             WishlistSectionEdges `json:"edges"`
	wishlist_sections *uuid.UUID
	selectValues      sql.SelectValues
}

// WishlistSectionEdges holds the relations/edges for other nodes in the graph.
type WishlistSectionEdges struct {
	// Wishlist holds the value of the wishlist edge.
	Wishlist *Wishlist `json:"wishlist,omitempty"`
	// WishlistTemplateSection holds the value of the wishlistTemplateSection edge.
	WishlistTemplateSection []*WishlistTemplateSection `json:"wishlistTemplateSection,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// WishlistOrErr returns the Wishlist value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WishlistSectionEdges) WishlistOrErr() (*Wishlist, error) {
	if e.Wishlist != nil {
		return e.Wishlist, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: wishlist.Label}
	}
	return nil, &NotLoadedError{edge: "wishlist"}
}

// WishlistTemplateSectionOrErr returns the WishlistTemplateSection value or an error if the edge
// was not loaded in eager-loading.
func (e WishlistSectionEdges) WishlistTemplateSectionOrErr() ([]*WishlistTemplateSection, error) {
	if e.loadedTypes[1] {
		return e.WishlistTemplateSection, nil
	}
	return nil, &NotLoadedError{edge: "wishlistTemplateSection"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WishlistSection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case wishlistsection.FieldType, wishlistsection.FieldTextValue:
			values[i] = new(sql.NullString)
		case wishlistsection.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case wishlistsection.FieldID:
			values[i] = new(uuid.UUID)
		case wishlistsection.ForeignKeys[0]: // wishlist_sections
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WishlistSection fields.
func (ws *WishlistSection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case wishlistsection.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ws.ID = *value
			}
		case wishlistsection.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ws.Type = wishlistsection.Type(value.String)
			}
		case wishlistsection.FieldTextValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field textValue", values[i])
			} else if value.Valid {
				ws.TextValue = value.String
			}
		case wishlistsection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ws.CreatedAt = value.Time
			}
		case wishlistsection.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field wishlist_sections", values[i])
			} else if value.Valid {
				ws.wishlist_sections = new(uuid.UUID)
				*ws.wishlist_sections = *value.S.(*uuid.UUID)
			}
		default:
			ws.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WishlistSection.
// This includes values selected through modifiers, order, etc.
func (ws *WishlistSection) Value(name string) (ent.Value, error) {
	return ws.selectValues.Get(name)
}

// QueryWishlist queries the "wishlist" edge of the WishlistSection entity.
func (ws *WishlistSection) QueryWishlist() *WishlistQuery {
	return NewWishlistSectionClient(ws.config).QueryWishlist(ws)
}

// QueryWishlistTemplateSection queries the "wishlistTemplateSection" edge of the WishlistSection entity.
func (ws *WishlistSection) QueryWishlistTemplateSection() *WishlistTemplateSectionQuery {
	return NewWishlistSectionClient(ws.config).QueryWishlistTemplateSection(ws)
}

// Update returns a builder for updating this WishlistSection.
// Note that you need to call WishlistSection.Unwrap() before calling this method if this WishlistSection
// was returned from a transaction, and the transaction was committed or rolled back.
func (ws *WishlistSection) Update() *WishlistSectionUpdateOne {
	return NewWishlistSectionClient(ws.config).UpdateOne(ws)
}

// Unwrap unwraps the WishlistSection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ws *WishlistSection) Unwrap() *WishlistSection {
	_tx, ok := ws.config.driver.(*txDriver)
	if !ok {
		panic("ent: WishlistSection is not a transactional entity")
	}
	ws.config.driver = _tx.drv
	return ws
}

// String implements the fmt.Stringer.
func (ws *WishlistSection) String() string {
	var builder strings.Builder
	builder.WriteString("WishlistSection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ws.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ws.Type))
	builder.WriteString(", ")
	builder.WriteString("textValue=")
	builder.WriteString(ws.TextValue)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ws.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WishlistSections is a parsable slice of WishlistSection.
type WishlistSections []*WishlistSection
