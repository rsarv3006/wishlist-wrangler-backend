// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wishlist-wrangler-api/ent/wishlisttemplate"
	"wishlist-wrangler-api/ent/wishlisttemplatesection"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// WishlistTemplateSection is the model entity for the WishlistTemplateSection schema.
type WishlistTemplateSection struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WishlistTemplateSectionQuery when eager-loading is set.
	Edges                                      WishlistTemplateSectionEdges `json:"edges"`
	wishlist_section_wishlist_template_section *uuid.UUID
	wishlist_template_sections                 *uuid.UUID
	selectValues                               sql.SelectValues
}

// WishlistTemplateSectionEdges holds the relations/edges for other nodes in the graph.
type WishlistTemplateSectionEdges struct {
	// WishlistTemplate holds the value of the wishlistTemplate edge.
	WishlistTemplate *WishlistTemplate `json:"wishlistTemplate,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WishlistTemplateOrErr returns the WishlistTemplate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WishlistTemplateSectionEdges) WishlistTemplateOrErr() (*WishlistTemplate, error) {
	if e.WishlistTemplate != nil {
		return e.WishlistTemplate, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: wishlisttemplate.Label}
	}
	return nil, &NotLoadedError{edge: "wishlistTemplate"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WishlistTemplateSection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case wishlisttemplatesection.FieldTitle:
			values[i] = new(sql.NullString)
		case wishlisttemplatesection.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case wishlisttemplatesection.FieldID:
			values[i] = new(uuid.UUID)
		case wishlisttemplatesection.ForeignKeys[0]: // wishlist_section_wishlist_template_section
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case wishlisttemplatesection.ForeignKeys[1]: // wishlist_template_sections
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WishlistTemplateSection fields.
func (wts *WishlistTemplateSection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case wishlisttemplatesection.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wts.ID = *value
			}
		case wishlisttemplatesection.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				wts.Title = value.String
			}
		case wishlisttemplatesection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wts.CreatedAt = value.Time
			}
		case wishlisttemplatesection.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field wishlist_section_wishlist_template_section", values[i])
			} else if value.Valid {
				wts.wishlist_section_wishlist_template_section = new(uuid.UUID)
				*wts.wishlist_section_wishlist_template_section = *value.S.(*uuid.UUID)
			}
		case wishlisttemplatesection.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field wishlist_template_sections", values[i])
			} else if value.Valid {
				wts.wishlist_template_sections = new(uuid.UUID)
				*wts.wishlist_template_sections = *value.S.(*uuid.UUID)
			}
		default:
			wts.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WishlistTemplateSection.
// This includes values selected through modifiers, order, etc.
func (wts *WishlistTemplateSection) Value(name string) (ent.Value, error) {
	return wts.selectValues.Get(name)
}

// QueryWishlistTemplate queries the "wishlistTemplate" edge of the WishlistTemplateSection entity.
func (wts *WishlistTemplateSection) QueryWishlistTemplate() *WishlistTemplateQuery {
	return NewWishlistTemplateSectionClient(wts.config).QueryWishlistTemplate(wts)
}

// Update returns a builder for updating this WishlistTemplateSection.
// Note that you need to call WishlistTemplateSection.Unwrap() before calling this method if this WishlistTemplateSection
// was returned from a transaction, and the transaction was committed or rolled back.
func (wts *WishlistTemplateSection) Update() *WishlistTemplateSectionUpdateOne {
	return NewWishlistTemplateSectionClient(wts.config).UpdateOne(wts)
}

// Unwrap unwraps the WishlistTemplateSection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wts *WishlistTemplateSection) Unwrap() *WishlistTemplateSection {
	_tx, ok := wts.config.driver.(*txDriver)
	if !ok {
		panic("ent: WishlistTemplateSection is not a transactional entity")
	}
	wts.config.driver = _tx.drv
	return wts
}

// String implements the fmt.Stringer.
func (wts *WishlistTemplateSection) String() string {
	var builder strings.Builder
	builder.WriteString("WishlistTemplateSection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wts.ID))
	builder.WriteString("title=")
	builder.WriteString(wts.Title)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wts.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WishlistTemplateSections is a parsable slice of WishlistTemplateSection.
type WishlistTemplateSections []*WishlistTemplateSection
