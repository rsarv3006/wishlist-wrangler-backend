// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"wishlist-wrangler-api/ent/wishlist"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Wishlist is the model entity for the Wishlist schema.
type Wishlist struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Status holds the value of the "status" field.
	Status wishlist.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WishlistQuery when eager-loading is set.
	Edges        WishlistEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WishlistEdges holds the relations/edges for other nodes in the graph.
type WishlistEdges struct {
	// Creator holds the value of the creator edge.
	Creator []*User `json:"creator,omitempty"`
	// Template holds the value of the template edge.
	Template []*WishlistTemplate `json:"template,omitempty"`
	// Sections holds the value of the sections edge.
	Sections []*WishlistSection `json:"sections,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading.
func (e WishlistEdges) CreatorOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// TemplateOrErr returns the Template value or an error if the edge
// was not loaded in eager-loading.
func (e WishlistEdges) TemplateOrErr() ([]*WishlistTemplate, error) {
	if e.loadedTypes[1] {
		return e.Template, nil
	}
	return nil, &NotLoadedError{edge: "template"}
}

// SectionsOrErr returns the Sections value or an error if the edge
// was not loaded in eager-loading.
func (e WishlistEdges) SectionsOrErr() ([]*WishlistSection, error) {
	if e.loadedTypes[2] {
		return e.Sections, nil
	}
	return nil, &NotLoadedError{edge: "sections"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Wishlist) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case wishlist.FieldTitle, wishlist.FieldStatus:
			values[i] = new(sql.NullString)
		case wishlist.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case wishlist.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Wishlist fields.
func (w *Wishlist) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case wishlist.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				w.ID = *value
			}
		case wishlist.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				w.Title = value.String
			}
		case wishlist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case wishlist.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				w.Status = wishlist.Status(value.String)
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Wishlist.
// This includes values selected through modifiers, order, etc.
func (w *Wishlist) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the Wishlist entity.
func (w *Wishlist) QueryCreator() *UserQuery {
	return NewWishlistClient(w.config).QueryCreator(w)
}

// QueryTemplate queries the "template" edge of the Wishlist entity.
func (w *Wishlist) QueryTemplate() *WishlistTemplateQuery {
	return NewWishlistClient(w.config).QueryTemplate(w)
}

// QuerySections queries the "sections" edge of the Wishlist entity.
func (w *Wishlist) QuerySections() *WishlistSectionQuery {
	return NewWishlistClient(w.config).QuerySections(w)
}

// Update returns a builder for updating this Wishlist.
// Note that you need to call Wishlist.Unwrap() before calling this method if this Wishlist
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Wishlist) Update() *WishlistUpdateOne {
	return NewWishlistClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Wishlist entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Wishlist) Unwrap() *Wishlist {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Wishlist is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Wishlist) String() string {
	var builder strings.Builder
	builder.WriteString("Wishlist(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("title=")
	builder.WriteString(w.Title)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", w.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Wishlists is a parsable slice of Wishlist.
type Wishlists []*Wishlist
