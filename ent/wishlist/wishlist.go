// Code generated by ent, DO NOT EDIT.

package wishlist

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the wishlist type in the database.
	Label = "wishlist"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgeTemplate holds the string denoting the template edge name in mutations.
	EdgeTemplate = "template"
	// EdgeSections holds the string denoting the sections edge name in mutations.
	EdgeSections = "sections"
	// Table holds the table name of the wishlist in the database.
	Table = "wishlists"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "users"
	// CreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorInverseTable = "users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "wishlist_creator"
	// TemplateTable is the table that holds the template relation/edge.
	TemplateTable = "wishlist_templates"
	// TemplateInverseTable is the table name for the WishlistTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "wishlisttemplate" package.
	TemplateInverseTable = "wishlist_templates"
	// TemplateColumn is the table column denoting the template relation/edge.
	TemplateColumn = "wishlist_template"
	// SectionsTable is the table that holds the sections relation/edge.
	SectionsTable = "wishlist_sections"
	// SectionsInverseTable is the table name for the WishlistSection entity.
	// It exists in this package in order to avoid circular dependency with the "wishlistsection" package.
	SectionsInverseTable = "wishlist_sections"
	// SectionsColumn is the table column denoting the sections relation/edge.
	SectionsColumn = "wishlist_sections"
)

// Columns holds all SQL columns for wishlist fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldCreatedAt,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPENDING is the default value of the Status enum.
const DefaultStatus = StatusPENDING

// Status values.
const (
	StatusPENDING   Status = "PENDING"
	StatusACTIVE    Status = "ACTIVE"
	StatusREMOVED   Status = "REMOVED"
	StatusCOMPLETED Status = "COMPLETED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPENDING, StatusACTIVE, StatusREMOVED, StatusCOMPLETED:
		return nil
	default:
		return fmt.Errorf("wishlist: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Wishlist queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatorCount orders the results by creator count.
func ByCreatorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatorStep(), opts...)
	}
}

// ByCreator orders the results by creator terms.
func ByCreator(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTemplateCount orders the results by template count.
func ByTemplateCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTemplateStep(), opts...)
	}
}

// ByTemplate orders the results by template terms.
func ByTemplate(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTemplateStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySectionsCount orders the results by sections count.
func BySectionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSectionsStep(), opts...)
	}
}

// BySections orders the results by sections terms.
func BySections(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSectionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCreatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreatorTable, CreatorColumn),
	)
}
func newTemplateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TemplateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TemplateTable, TemplateColumn),
	)
}
func newSectionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SectionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SectionsTable, SectionsColumn),
	)
}
