// Code generated by ent, DO NOT EDIT.

package wishlisttemplatesection

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the wishlisttemplatesection type in the database.
	Label = "wishlist_template_section"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeWishlistTemplate holds the string denoting the wishlisttemplate edge name in mutations.
	EdgeWishlistTemplate = "wishlistTemplate"
	// Table holds the table name of the wishlisttemplatesection in the database.
	Table = "wishlist_template_sections"
	// WishlistTemplateTable is the table that holds the wishlistTemplate relation/edge.
	WishlistTemplateTable = "wishlist_template_sections"
	// WishlistTemplateInverseTable is the table name for the WishlistTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "wishlisttemplate" package.
	WishlistTemplateInverseTable = "wishlist_templates"
	// WishlistTemplateColumn is the table column denoting the wishlistTemplate relation/edge.
	WishlistTemplateColumn = "wishlist_template_sections"
)

// Columns holds all SQL columns for wishlisttemplatesection fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "wishlist_template_sections"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"wishlist_section_wishlist_template_section",
	"wishlist_template_sections",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the WishlistTemplateSection queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByWishlistTemplateField orders the results by wishlistTemplate field.
func ByWishlistTemplateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWishlistTemplateStep(), sql.OrderByField(field, opts...))
	}
}
func newWishlistTemplateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WishlistTemplateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WishlistTemplateTable, WishlistTemplateColumn),
	)
}
