// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"wishlist-wrangler-api/ent/predicate"
	"wishlist-wrangler-api/ent/wishlisttemplate"
	"wishlist-wrangler-api/ent/wishlisttemplatesection"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WishlistTemplateSectionUpdate is the builder for updating WishlistTemplateSection entities.
type WishlistTemplateSectionUpdate struct {
	config
	hooks    []Hook
	mutation *WishlistTemplateSectionMutation
}

// Where appends a list predicates to the WishlistTemplateSectionUpdate builder.
func (wtsu *WishlistTemplateSectionUpdate) Where(ps ...predicate.WishlistTemplateSection) *WishlistTemplateSectionUpdate {
	wtsu.mutation.Where(ps...)
	return wtsu
}

// SetTitle sets the "title" field.
func (wtsu *WishlistTemplateSectionUpdate) SetTitle(s string) *WishlistTemplateSectionUpdate {
	wtsu.mutation.SetTitle(s)
	return wtsu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (wtsu *WishlistTemplateSectionUpdate) SetNillableTitle(s *string) *WishlistTemplateSectionUpdate {
	if s != nil {
		wtsu.SetTitle(*s)
	}
	return wtsu
}

// SetWishlistTemplateID sets the "wishlistTemplate" edge to the WishlistTemplate entity by ID.
func (wtsu *WishlistTemplateSectionUpdate) SetWishlistTemplateID(id uuid.UUID) *WishlistTemplateSectionUpdate {
	wtsu.mutation.SetWishlistTemplateID(id)
	return wtsu
}

// SetNillableWishlistTemplateID sets the "wishlistTemplate" edge to the WishlistTemplate entity by ID if the given value is not nil.
func (wtsu *WishlistTemplateSectionUpdate) SetNillableWishlistTemplateID(id *uuid.UUID) *WishlistTemplateSectionUpdate {
	if id != nil {
		wtsu = wtsu.SetWishlistTemplateID(*id)
	}
	return wtsu
}

// SetWishlistTemplate sets the "wishlistTemplate" edge to the WishlistTemplate entity.
func (wtsu *WishlistTemplateSectionUpdate) SetWishlistTemplate(w *WishlistTemplate) *WishlistTemplateSectionUpdate {
	return wtsu.SetWishlistTemplateID(w.ID)
}

// Mutation returns the WishlistTemplateSectionMutation object of the builder.
func (wtsu *WishlistTemplateSectionUpdate) Mutation() *WishlistTemplateSectionMutation {
	return wtsu.mutation
}

// ClearWishlistTemplate clears the "wishlistTemplate" edge to the WishlistTemplate entity.
func (wtsu *WishlistTemplateSectionUpdate) ClearWishlistTemplate() *WishlistTemplateSectionUpdate {
	wtsu.mutation.ClearWishlistTemplate()
	return wtsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wtsu *WishlistTemplateSectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wtsu.sqlSave, wtsu.mutation, wtsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wtsu *WishlistTemplateSectionUpdate) SaveX(ctx context.Context) int {
	affected, err := wtsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wtsu *WishlistTemplateSectionUpdate) Exec(ctx context.Context) error {
	_, err := wtsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wtsu *WishlistTemplateSectionUpdate) ExecX(ctx context.Context) {
	if err := wtsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wtsu *WishlistTemplateSectionUpdate) check() error {
	if v, ok := wtsu.mutation.Title(); ok {
		if err := wishlisttemplatesection.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "WishlistTemplateSection.title": %w`, err)}
		}
	}
	return nil
}

func (wtsu *WishlistTemplateSectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wtsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(wishlisttemplatesection.Table, wishlisttemplatesection.Columns, sqlgraph.NewFieldSpec(wishlisttemplatesection.FieldID, field.TypeUUID))
	if ps := wtsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wtsu.mutation.Title(); ok {
		_spec.SetField(wishlisttemplatesection.FieldTitle, field.TypeString, value)
	}
	if wtsu.mutation.WishlistTemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlisttemplatesection.WishlistTemplateTable,
			Columns: []string{wishlisttemplatesection.WishlistTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlisttemplate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wtsu.mutation.WishlistTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlisttemplatesection.WishlistTemplateTable,
			Columns: []string{wishlisttemplatesection.WishlistTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlisttemplate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wtsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wishlisttemplatesection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wtsu.mutation.done = true
	return n, nil
}

// WishlistTemplateSectionUpdateOne is the builder for updating a single WishlistTemplateSection entity.
type WishlistTemplateSectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WishlistTemplateSectionMutation
}

// SetTitle sets the "title" field.
func (wtsuo *WishlistTemplateSectionUpdateOne) SetTitle(s string) *WishlistTemplateSectionUpdateOne {
	wtsuo.mutation.SetTitle(s)
	return wtsuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (wtsuo *WishlistTemplateSectionUpdateOne) SetNillableTitle(s *string) *WishlistTemplateSectionUpdateOne {
	if s != nil {
		wtsuo.SetTitle(*s)
	}
	return wtsuo
}

// SetWishlistTemplateID sets the "wishlistTemplate" edge to the WishlistTemplate entity by ID.
func (wtsuo *WishlistTemplateSectionUpdateOne) SetWishlistTemplateID(id uuid.UUID) *WishlistTemplateSectionUpdateOne {
	wtsuo.mutation.SetWishlistTemplateID(id)
	return wtsuo
}

// SetNillableWishlistTemplateID sets the "wishlistTemplate" edge to the WishlistTemplate entity by ID if the given value is not nil.
func (wtsuo *WishlistTemplateSectionUpdateOne) SetNillableWishlistTemplateID(id *uuid.UUID) *WishlistTemplateSectionUpdateOne {
	if id != nil {
		wtsuo = wtsuo.SetWishlistTemplateID(*id)
	}
	return wtsuo
}

// SetWishlistTemplate sets the "wishlistTemplate" edge to the WishlistTemplate entity.
func (wtsuo *WishlistTemplateSectionUpdateOne) SetWishlistTemplate(w *WishlistTemplate) *WishlistTemplateSectionUpdateOne {
	return wtsuo.SetWishlistTemplateID(w.ID)
}

// Mutation returns the WishlistTemplateSectionMutation object of the builder.
func (wtsuo *WishlistTemplateSectionUpdateOne) Mutation() *WishlistTemplateSectionMutation {
	return wtsuo.mutation
}

// ClearWishlistTemplate clears the "wishlistTemplate" edge to the WishlistTemplate entity.
func (wtsuo *WishlistTemplateSectionUpdateOne) ClearWishlistTemplate() *WishlistTemplateSectionUpdateOne {
	wtsuo.mutation.ClearWishlistTemplate()
	return wtsuo
}

// Where appends a list predicates to the WishlistTemplateSectionUpdate builder.
func (wtsuo *WishlistTemplateSectionUpdateOne) Where(ps ...predicate.WishlistTemplateSection) *WishlistTemplateSectionUpdateOne {
	wtsuo.mutation.Where(ps...)
	return wtsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wtsuo *WishlistTemplateSectionUpdateOne) Select(field string, fields ...string) *WishlistTemplateSectionUpdateOne {
	wtsuo.fields = append([]string{field}, fields...)
	return wtsuo
}

// Save executes the query and returns the updated WishlistTemplateSection entity.
func (wtsuo *WishlistTemplateSectionUpdateOne) Save(ctx context.Context) (*WishlistTemplateSection, error) {
	return withHooks(ctx, wtsuo.sqlSave, wtsuo.mutation, wtsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wtsuo *WishlistTemplateSectionUpdateOne) SaveX(ctx context.Context) *WishlistTemplateSection {
	node, err := wtsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wtsuo *WishlistTemplateSectionUpdateOne) Exec(ctx context.Context) error {
	_, err := wtsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wtsuo *WishlistTemplateSectionUpdateOne) ExecX(ctx context.Context) {
	if err := wtsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wtsuo *WishlistTemplateSectionUpdateOne) check() error {
	if v, ok := wtsuo.mutation.Title(); ok {
		if err := wishlisttemplatesection.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "WishlistTemplateSection.title": %w`, err)}
		}
	}
	return nil
}

func (wtsuo *WishlistTemplateSectionUpdateOne) sqlSave(ctx context.Context) (_node *WishlistTemplateSection, err error) {
	if err := wtsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(wishlisttemplatesection.Table, wishlisttemplatesection.Columns, sqlgraph.NewFieldSpec(wishlisttemplatesection.FieldID, field.TypeUUID))
	id, ok := wtsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WishlistTemplateSection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wtsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wishlisttemplatesection.FieldID)
		for _, f := range fields {
			if !wishlisttemplatesection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wishlisttemplatesection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wtsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wtsuo.mutation.Title(); ok {
		_spec.SetField(wishlisttemplatesection.FieldTitle, field.TypeString, value)
	}
	if wtsuo.mutation.WishlistTemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlisttemplatesection.WishlistTemplateTable,
			Columns: []string{wishlisttemplatesection.WishlistTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlisttemplate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wtsuo.mutation.WishlistTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wishlisttemplatesection.WishlistTemplateTable,
			Columns: []string{wishlisttemplatesection.WishlistTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wishlisttemplate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WishlistTemplateSection{config: wtsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wtsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wishlisttemplatesection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wtsuo.mutation.done = true
	return _node, nil
}
