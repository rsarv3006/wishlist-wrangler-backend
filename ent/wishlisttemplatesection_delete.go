// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"wishlist-wrangler-api/ent/predicate"
	"wishlist-wrangler-api/ent/wishlisttemplatesection"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WishlistTemplateSectionDelete is the builder for deleting a WishlistTemplateSection entity.
type WishlistTemplateSectionDelete struct {
	config
	hooks    []Hook
	mutation *WishlistTemplateSectionMutation
}

// Where appends a list predicates to the WishlistTemplateSectionDelete builder.
func (wtsd *WishlistTemplateSectionDelete) Where(ps ...predicate.WishlistTemplateSection) *WishlistTemplateSectionDelete {
	wtsd.mutation.Where(ps...)
	return wtsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wtsd *WishlistTemplateSectionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wtsd.sqlExec, wtsd.mutation, wtsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wtsd *WishlistTemplateSectionDelete) ExecX(ctx context.Context) int {
	n, err := wtsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wtsd *WishlistTemplateSectionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(wishlisttemplatesection.Table, sqlgraph.NewFieldSpec(wishlisttemplatesection.FieldID, field.TypeUUID))
	if ps := wtsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wtsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wtsd.mutation.done = true
	return affected, err
}

// WishlistTemplateSectionDeleteOne is the builder for deleting a single WishlistTemplateSection entity.
type WishlistTemplateSectionDeleteOne struct {
	wtsd *WishlistTemplateSectionDelete
}

// Where appends a list predicates to the WishlistTemplateSectionDelete builder.
func (wtsdo *WishlistTemplateSectionDeleteOne) Where(ps ...predicate.WishlistTemplateSection) *WishlistTemplateSectionDeleteOne {
	wtsdo.wtsd.mutation.Where(ps...)
	return wtsdo
}

// Exec executes the deletion query.
func (wtsdo *WishlistTemplateSectionDeleteOne) Exec(ctx context.Context) error {
	n, err := wtsdo.wtsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{wishlisttemplatesection.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wtsdo *WishlistTemplateSectionDeleteOne) ExecX(ctx context.Context) {
	if err := wtsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
